###INDICATOR - CAPITALS - CAPITAL MEDIAN
###THIS INDICATOR INCLUDES: ONLY URBAN AREAS; CAPITAL MEDIAN; INCOME DECILES.


library("tidyverse")
library("Hmisc")
library("weights")
library("survey")

setwd("C:/Users/55219/Meu Drive/DOUTORADO PPE UFRJ/Transport Research Part D/GITHUB")
# Carregando a base:
load(file = "Despesa_Individual.RData")
load(file = "Estratos_peso.RData")

require(dplyr)

### Setting and creating a personal and household ID: expense basis

despesa_ind$cod_upa=as.character(despesa_ind$cod_upa)
despesa_ind$estrato_pof=as.character(despesa_ind$estrato_pof)
despesa_ind$tipo_situacao_reg=as.character(despesa_ind$tipo_situacao_reg)
despesa_ind$num_dom=as.character(despesa_ind$num_dom)
despesa_ind$num_uc=as.character(despesa_ind$num_uc)
despesa_ind$cod_informante=as.character(despesa_ind$cod_informante)

despesa_ind <- despesa_ind %>%
  dplyr::mutate(DomicilioID = paste0(cod_upa, num_dom, num_uc, sep = ""))

despesa_ind <- despesa_ind %>% 
  select(DomicilioID,estrato_pof, cod_upa, cod_upa,renda_total,uf, deflator,peso,v9001,v9011,v8000_defla,fator_anualizacao,tipo_situacao_reg)

# Calculating annual transportation and gasoline expenditure and annual households income. 
base <- despesa_ind %>%
  filter(v9001 %in% c(2300801,2300701,2302301,2302302,2300101,2300201,2300301,
                      2300401,2300402,2300403,2300403,2300404,2300502,2303101,
                      2303102,2303201,2300601,2300602,2300409,2300901,2300902,
                      2300903,2300904,2300906,2300907,2300908,2300911,2301101,
                      2301201,2301301,2302801,2302901,2303001,2301401,2301501,
                      2301502,2301601,2301801)) %>% 
  mutate(gasto_transporte_pub = ifelse(is.na(v9011), 
                                       v8000_defla*fator_anualizacao, 
                                       v8000_defla*fator_anualizacao*v9011),
         renda_anual = ifelse(is.na(deflator),
                              renda_total*12,
                              renda_total*12*deflator))

# Adding up the total transportation and fuel expenses and creating an ID that identifies households:

base=base %>% 
  group_by(DomicilioID) %>% 
  mutate(gasto_total = sum(gasto_transporte_pub, rm.na=T)) %>% 
  ungroup()


# Leaving only the information on the first line of the household in the database:
base =  dplyr::distinct(base,DomicilioID,.keep_all = TRUE)

#### Creating the CAPITALS variable:
base = base %>%
  mutate(capital = case_when(
    estrato_pof %in% c(1201) ~ "Rio Branco",
    estrato_pof %in% c(2701,2702,2703) ~ "Maceió",
    estrato_pof %in% c(1301,1302,1303,1304,1305,1306) ~ "Manaus",
    estrato_pof %in% c(1601,1602) ~ "Macapá",
    estrato_pof %in% c(2901,2902,2903,2904,2905,2906) ~ "Salvador",
    estrato_pof %in% c(2301,2302,2303,2304,2305,2306) ~ "Fortaleza",
    estrato_pof %in% c(5301,5302,5303,5304,5305,5306) ~ "Brasília",
    estrato_pof %in% c(3201,3202) ~ "Vitória",
    estrato_pof %in% c(5201,5202,5203) ~ "Goiânia",
    estrato_pof %in% c(2101,2102,2103) ~ "São Luís",
    estrato_pof %in% c(3101,3102,3103,3104,3105,3106) ~ "Belo Horizonte",
    estrato_pof %in% c(5001,5002,5003) ~ "Campo Grande",
    estrato_pof %in% c(5101,5102) ~ "Cuiabá",
    estrato_pof %in% c(1501,1502,1503) ~ "Belém",
    estrato_pof %in% c(2501,2502,2503) ~ "João Pessoa",
    estrato_pof %in% c(2601,2602,2603) ~ "Recife",
    estrato_pof %in% c(2201,2202,2203) ~ "Teresina",
    estrato_pof %in% c(4101,4102,4103,4104,4105) ~ "Curitiba",
    estrato_pof %in% c(3301,3302,3303,3304,3305,3306,3307,3308,3309) ~ "Rio de Janeiro",
    estrato_pof %in% c(2401,2402) ~ "Natal",
    estrato_pof %in% c(4301,4302,4303,4304,4305,4306) ~ "Porto Alegre",
    estrato_pof %in% c(1101,1102) ~ "Porto Velho",
    estrato_pof %in% c(1401,1402) ~ "Boa Vista",
    estrato_pof %in% c(4201,4202) ~ "Florianópolis",
    estrato_pof %in% c(2801,2802) ~ "Aracaju",
    estrato_pof %in% c(3501,3502,3503,3504,3505,3506,3507,3508,3509) ~ "São Paulo",
    estrato_pof %in% c(1701) ~ "Palmas",
    TRUE ~ NA))

rm(despesa_ind)

# Capital filter: 

base_capital = base %>% 
  filter(capital == "Palmas") # alterar as capitais


desenho_amostral <- 
  svydesign(
    id = ~ cod_upa , 
    strata = ~ estrato_pof ,
    weights = ~ peso ,
    data = base_capital,
    nest = TRUE
  )


decis <- svyquantile(~base_capital$renda_anual, desenho_amostral, quantiles = seq(0.1, 1, by = 0.1))

base_capital = base_capital %>% 
  mutate(decil= case_when(
    renda_anual >= 0 & renda_anual <= decis[["base_capital$renda_anual"]][1] ~ "1º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][1] & renda_anual <= decis[["base_capital$renda_anual"]][2] ~ "2º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][2] & renda_anual <= decis[["base_capital$renda_anual"]][3] ~ "3º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][3]  & renda_anual <= decis[["base_capital$renda_anual"]][4] ~ "4º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][4]  & renda_anual <= decis[["base_capital$renda_anual"]][5] ~ "5º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][5]  & renda_anual <= decis[["base_capital$renda_anual"]][6] ~ "6º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][6]  & renda_anual <= decis[["base_capital$renda_anual"]][7] ~ "7º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][7]  & renda_anual <= decis[["base_capital$renda_anual"]][8] ~ "8º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][8]  & renda_anual <= decis[["base_capital$renda_anual"]][9] ~ "9º Decil",
    renda_anual > decis[["base_capital$renda_anual"]][9] ~ "10º Decil", 
    T ~ NA))

mediana_regiao=svyquantile(~base_capital$gasto_total, desenho_amostral, quantiles = 0.5)

gc()
options(survey.lonely.psu = "adjust")


# number of households with expenses  
desenho_amostral$variables$Total = 1
tot_fam_geral=svytotal(~ Total, desenho_amostral)

# Households with expenses lower than the M/2
base_capital_abaixo = base_capital %>%  
  filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1]/2))

base_capital_abaixo = merge(base_capital_abaixo, post_stratification_df)

desenho_amostral1 <- 
  svydesign(
    id = ~ cod_upa , 
    strata = ~ estrato_pof ,
    weights = ~ peso ,
    data = base_capital_abaixo,
    nest = TRUE
  )

desenho_amostral1$variables$Total = 1
tot_fam_med_geral=svytotal(~Total, desenho_amostral1)

# Median of households that spend less than Capital M/2
mediana_abaixo=svyquantile(~base_capital_abaixo$gasto_total, desenho_amostral1, quantiles = 0.5)

base_mediana_abaixo = base_capital_abaixo %>% 
  mutate(valor_total = (mediana_abaixo[["base_capital_abaixo$gasto_total"]][1]/2) - gasto_total)

med_total=mediana_abaixo[["base_capital_abaixo$gasto_total"]][1]/2

desenho_amostral1 <- 
  svydesign(
    id = ~ cod_upa , 
    strata = ~ estrato_pof ,
    weights = ~ peso ,
    data = base_mediana_abaixo,
    nest = TRUE
  )

media_dif_total=svymean(~base_mediana_abaixo$valor_total, desenho_amostral1)
ext_total_total=svytotal(~base_mediana_abaixo$valor_total, desenho_amostral1)

############# 1º Decile 
# Filter data for the 1st decile
base_d1 <- base_capital %>% 
  filter(decil == "1º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam1 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses less than the median/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med1 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil1 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil1 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d1 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d1 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med1 <- NA
    med_decil1 <- NA
    media_dif_d1 <- NA
    ext_total_d1 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam1 <- NA
  tot_fam_med1 <- NA
  med_decil1 <- NA
  media_dif_d1 <- NA
  ext_total_d1 <- NA
}

############# 2º Decil 

# Filtrar dados para o 2º decil
base_d1 <- base_capital %>% 
  filter(decil == "2º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam2 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses less than the median/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med2 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil2 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil2 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d2 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d2 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med2 <- NA
    med_decil2 <- NA
    media_dif_d2 <- NA
    ext_total_d2 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam2 <- NA
  tot_fam_med2 <- NA
  med_decil2 <- NA
  media_dif_d2 <- NA
  ext_total_d2 <- NA
}


############# 3º Decil 

# Filtrar dados para o 3º decil
base_d1 <- base_capital %>% 
  filter(decil == "3º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam3 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med3 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil3 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil3 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d3 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d3 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med3 <- NA
    med_decil3 <- NA
    media_dif_d3 <- NA
    ext_total_d3 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam3 <- NA
  tot_fam_med3 <- NA
  med_decil3 <- NA
  media_dif_d3 <- NA
  ext_total_d3 <- NA
}


############# 4º Decil 

# Filtrar dados para o 4º decil
base_d1 <- base_capital %>% 
  filter(decil == "4º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam4 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med4 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil4 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil4 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d4 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d4 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med4 <- NA
    med_decil4 <- NA
    media_dif_d4 <- NA
    ext_total_d4 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam4 <- NA
  tot_fam_med4 <- NA
  med_decil4 <- NA
  media_dif_d4 <- NA
  ext_total_d4 <- NA
}


############# 5º Decil 

# Filtrar dados para o 5º decil
base_d1 <- base_capital %>% 
  filter(decil == "5º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam5 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med5 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil5 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil5 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d5 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d5 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med5 <- NA
    med_decil5 <- NA
    media_dif_d5 <- NA
    ext_total_d5 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam5 <- NA
  tot_fam_med5 <- NA
  med_decil5 <- NA
  media_dif_d5 <- NA
  ext_total_d5 <- NA
}


############# 6º Decil 

# Filtrar dados para o 6º decil
base_d1 <- base_capital %>% 
  filter(decil == "6º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam6 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med6 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil6 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil6 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d6 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d6 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med6 <- NA
    med_decil6 <- NA
    media_dif_d6 <- NA
    ext_total_d6 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam6 <- NA
  tot_fam_med6 <- NA
  med_decil6 <- NA
  media_dif_d6 <- NA
  ext_total_d6 <- NA
}


############# 7º Decil 

# Filtrar dados para o 7º decil
base_d1 <- base_capital %>% 
  filter(decil == "7º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam7 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med7 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil7 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil7 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d7 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d7 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med7 <- NA
    med_decil7 <- NA
    media_dif_d7 <- NA
    ext_total_d7 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam7 <- NA
  tot_fam_med7 <- NA
  med_decil7 <- NA
  media_dif_d7 <- NA
  ext_total_d7 <- NA
}


############# 8º Decil 

# Filtrar dados para o 8º decil
base_d1 <- base_capital %>% 
  filter(decil == "8º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam8 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med8 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil8 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil8 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d8 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d8 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med8 <- NA
    med_decil8 <- NA
    media_dif_d8 <- NA
    ext_total_d8 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam8 <- NA
  tot_fam_med8 <- NA
  med_decil8 <- NA
  media_dif_d8 <- NA
  ext_total_d8 <- NA
}


############# 9º Decil 

# Filtrar dados para o 9º decil
base_d1 <- base_capital %>% 
  filter(decil == "9º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam9 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses lower than the M/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med9 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil9 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil9 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d9 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d9 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med9 <- NA
    med_decil9 <- NA
    media_dif_d9 <- NA
    ext_total_d9 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam9 <- NA
  tot_fam_med9 <- NA
  med_decil9 <- NA
  media_dif_d9 <- NA
  ext_total_d9 <- NA
}


############# 10º Decil 

# Filtrar dados para o 10º decil
base_d1 <- base_capital %>% 
  filter(decil == "10º Decil")

# Check that the base is not empty before proceeding.
if (nrow(base_d1) > 0) {
  # Mesclar com a base de pós-estratificação
  base_d1 <- merge(base_d1, post_stratification_df)
  
  # Create the sample design
  desenho_amostral1 <- svydesign(
    id = ~ cod_upa, 
    strata = ~ estrato_pof,
    weights = ~ peso,
    data = base_d1,
    nest = TRUE
  )
  
  # Add Total variable
  desenho_amostral1$variables$Total <- 1
  
  # Calculate the number of households in the decile
  tot_fam10 <- svytotal(~Total, desenho_amostral1)
  
  # Filter households with expenses less than the median/2
  base_d1 <- base_d1 %>%  
    filter(gasto_total < (mediana_regiao[["base_capital$gasto_total"]][1] / 2))
  
  if (nrow(base_d1) > 0) {
    # Merge again after filter
    base_d1 <- merge(base_d1, post_stratification_df)
    
    # ReCreate the sample design
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_d1,
      nest = TRUE
    )
    
    desenho_amostral1$variables$Total <- 1
    
    # Calculate the number of households with expenses below M/2
    tot_fam_med10 <- svytotal(~Total, desenho_amostral1)
    
    # Calculate the decile median
    mediana_decil <- svyquantile(~gasto_total, desenho_amostral1, quantiles = 0.5)
    med_decil10 <- mediana_decil[["gasto_total"]][1] / 2
    
    # Calculate the average and total difference
    base_mediana <- base_d1 %>% 
      mutate(valor_total = med_decil10 - gasto_total)
    
    desenho_amostral1 <- svydesign(
      id = ~ cod_upa, 
      strata = ~ estrato_pof,
      weights = ~ peso,
      data = base_mediana,
      nest = TRUE
    )
    
    media_dif_d10 <- svymean(~valor_total, desenho_amostral1)
    ext_total_d10 <- svytotal(~valor_total, desenho_amostral1)
  } else {
    # Set values ​​to NA if base_d1 is empty after filter
    tot_fam_med10 <- NA
    med_decil10 <- NA
    media_dif_d10 <- NA
    ext_total_d10 <- NA
  }
} else {
  # Set values ​​to NA if base_d1 is initially empty
  tot_fam10 <- NA
  tot_fam_med10 <- NA
  med_decil10 <- NA
  media_dif_d10 <- NA
  ext_total_d10 <- NA
}

### Saving:


# Household size in decile

tot_fam_decil=c(tot_fam1[1],
                tot_fam2[1],
                tot_fam3[1],
                tot_fam4[1],
                tot_fam5[1],
                tot_fam6[1],
                tot_fam7[1],
                tot_fam8[1],
                tot_fam9[1],
                tot_fam10[1], 
                tot_fam_geral[1])

# Number of household below the median

tot_fam_abaixo_decil=c(tot_fam_med1[1],
                       tot_fam_med2[1],
                       tot_fam_med3[1],
                       tot_fam_med4[1],
                       tot_fam_med5[1],
                       tot_fam_med6[1],
                       tot_fam_med7[1],
                       tot_fam_med8[1],
                       tot_fam_med9[1],
                       tot_fam_med10[1],
                       tot_fam_med_geral[1])

# M/2

valor_metade=c(med_decil1,
                       med_decil2,
                       med_decil3,
                       med_decil4,
                       med_decil5,
                       med_decil6,
                       med_decil7,
                       med_decil8,
                       med_decil9,
                       med_decil10,
                       med_total)


# Average difference value

media_diferenca=c(media_dif_d1[1],
            media_dif_d2[1],
            media_dif_d3[1],
            media_dif_d4[1],
            media_dif_d5[1],
            media_dif_d6[1],
            media_dif_d7[1],
            media_dif_d8[1],
            media_dif_d9[1],
            media_dif_d10[1],
            media_dif_total[1])

# Value

ext_total=c(ext_total_d1[1],
            ext_total_d2[1],
            ext_total_d3[1],
            ext_total_d4[1],
            ext_total_d5[1],
            ext_total_d6[1],
            ext_total_d7[1],
            ext_total_d8[1],
            ext_total_d9[1],
            ext_total_d10[1],
            ext_total_total[1])

# Change to your folder on your computer
setwd("C:/Users/55219/Meu Drive/DOUTORADO PPE UFRJ/Transport Research Part D/GITHUB")

# Package to save in excel
#install.packages("openxlsx")
library(openxlsx)

# Create a new workbook
wb <- createWorkbook()
# Add multiple sheets with different results
addWorksheet(wb, "Resultado_1")
writeData(wb, "Resultado_1", tot_fam_decil)

addWorksheet(wb, "Resultado_2")
writeData(wb, "Resultado_2", tot_fam_abaixo_decil)

addWorksheet(wb, "Resultado_3")
writeData(wb, "Resultado_3", valor_metade)

addWorksheet(wb, "Resultado_4")
writeData(wb, "Resultado_4", media_diferenca)

addWorksheet(wb, "Resultado_5")
writeData(wb, "Resultado_5", ext_total)

# Save multiple sheets with different results into a single file
saveWorkbook(wb, "resultados_analiseCapitalMedianaCapital.xlsx", overwrite = TRUE)
